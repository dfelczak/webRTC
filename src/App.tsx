import './App.css'
import { useRef, useState } from 'react'

import { FullScreenBackdrop } from './ui/FullScreenBackdrop'
import type { Mode } from './types'
import { Wizard } from './Wizard'
import { Spinner } from './ui/Spinner'
import { FailedConnectionState } from './ui/FailedConnectionState'
import { CallControls } from './ui/CallControls'
import { ClosedConnectionState } from './ui/ClosedConnectionState'
import { useAutoGeneratedSDPAnswer } from './hooks/useAutoGeneratedSDPAnswer'
import { useRTCPeerConnection } from './hooks/useRTCPeerConnection'
import { useCallControls } from './hooks/useCallControls'
import { useOfferCreate } from './hooks/useOfferCreate'
import { useOnTrack } from './hooks/useOnTrack'
import { useOnICECandidate } from './hooks/useOnICECandidate'
import { useOnConnectionStateChange } from './hooks/useOnConnectionStateChange'
import { useOnLocalStreamReady } from './hooks/useOnLocalStreamReady'
import { DebugButton } from './ui/DebugButton'
import { WebRTCObservability } from './ui/WebRCTObservability'

export default function App() {
  const localVideoRef = useRef<HTMLVideoElement>(null)
  const remoteVideoRef = useRef<HTMLVideoElement>(null)

  const streamRef = useRef<MediaStream | null>(null)
  const [isStreamSet, setIsStreamSet] = useState(false)

  const pcRef = useRef<RTCPeerConnection | null>(null)
  const [localSDP, setLocalSDP] = useState('')
  const [remoteSDP, setRemoteSDP] = useState('')
  const [offerLink, setOfferLink] = useState<string | null>(null)
  const [mode, setMode] = useState<Mode>('idle')
  const [connectionState, setConnectionState] = useState<RTCPeerConnectionState>('new')

  useAutoGeneratedSDPAnswer({ pcRef, setLocalSDP, setMode, setRemoteSDP, streamRef, isStreamSet })
  useRTCPeerConnection({
    pcRef,
    streamRef,
    setIsStreamSet,
    localVideoRef,
  })

  useOnTrack(pcRef, remoteVideoRef)
  useOnICECandidate(pcRef, setLocalSDP)
  useOnConnectionStateChange(pcRef, setConnectionState)
  useOnLocalStreamReady(localVideoRef, streamRef)
  useOfferCreate({ pcRef, localVideoRef, setOfferLink })

  const { toggleMute, disconnect, muted } = useCallControls({ pcRef, streamRef })

  const setRemote = async () => {
    if (!pcRef.current) return
    try {
      const desc = JSON.parse(remoteSDP)
      await pcRef.current.setRemoteDescription(new RTCSessionDescription(desc))
    } catch {
      alert('SDP invalid')
    }
  }

  return (
    <>
      <video
        ref={localVideoRef}
        autoPlay
        playsInline
        muted
        className={
          connectionState === 'new'
            ? 'bg-black rounded w-screen h-screen object-cover'
            : 'fixed bottom-4 right-4  w-64 h-36 rounded-2xl border border-gray-300 dark:border-gray-700 shadow-lg bg-black object-cover z-50'
        }
      />

      <video
        ref={remoteVideoRef}
        autoPlay
        playsInline
        className="bg-black rounded w-screen h-screen object-cover"
      />

      <CallControls muted={muted} onToggleMute={toggleMute} onDisconnect={disconnect} />

      {'new' === connectionState && (
        <Wizard
          offerLink={offerLink}
          setRemote={setRemote}
          remoteSDP={remoteSDP}
          mode={mode}
          localSDP={localSDP}
          setRemoteSDP={setRemoteSDP}
        />
      )}

      {'connecting' === connectionState && (
        <FullScreenBackdrop>
          <div className="flex min-h-64 flex items-center justify-center">
            <Spinner />
          </div>
        </FullScreenBackdrop>
      )}

      {'failed' === connectionState && <FailedConnectionState />}
      {['closed', 'disconnected'].includes(connectionState) && <ClosedConnectionState />}

      <DebugButton>
        <WebRTCObservability
          pcRef={pcRef}
          streamRef={streamRef}
          remoteVideoRef={remoteVideoRef}
          localVideoRef={localVideoRef}
        />
      </DebugButton>
    </>
  )
}
