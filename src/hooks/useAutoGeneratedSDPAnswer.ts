import { useEffect, useState } from 'react'
import { decodeSDP } from '../utils'
import type { Mode } from '../types'
import { useURLOffer } from './useURLOffer'

export function useAutoGeneratedSDPAnswer({
  pcRef,
  streamRef,
  setLocalSDP,
  setRemoteSDP,
  setMode,
  isStreamSet,
}: {
  pcRef: React.RefObject<RTCPeerConnection | null>
  streamRef: React.RefObject<MediaStream | null>
  setLocalSDP: (sdp: string) => void
  setRemoteSDP: (sdp: string) => void
  setMode: (mode: Mode) => void
  isStreamSet: boolean
}) {
  const [autoOfferLoaded, setAutoOfferLoaded] = useState(false)
  const offerEncoded = useURLOffer()

  useEffect(() => {
    const autoGenerateAnswer = async (offer: RTCSessionDescriptionInit) => {
      if (!pcRef.current || !streamRef.current) return
      try {
        await pcRef.current.setRemoteDescription(new RTCSessionDescription(offer))

        streamRef.current.getTracks().forEach((track) => {
          pcRef.current?.addTrack(track, streamRef.current!)
        })

        const answer = await pcRef.current.createAnswer()
        await pcRef.current.setLocalDescription(answer)
        setLocalSDP(JSON.stringify(answer, null, 2))
        setAutoOfferLoaded(true)
      } catch {
        alert('SDP invalid')
      }
    }

    if (offerEncoded && !autoOfferLoaded) {
      try {
        const offer = decodeSDP(offerEncoded)
        setRemoteSDP(JSON.stringify(offer, null, 2))
        setMode('answering')
        autoGenerateAnswer(offer)
      } catch {
        alert('Invalid URL.')
      }
    }
  }, [autoOfferLoaded, isStreamSet])
}
